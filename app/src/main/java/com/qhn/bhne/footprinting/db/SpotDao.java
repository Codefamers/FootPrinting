package com.qhn.bhne.footprinting.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.qhn.bhne.footprinting.mvp.entries.Spot;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPOT".
*/
public class SpotDao extends AbstractDao<Spot, Long> {

    public static final String TABLENAME = "SPOT";

    /**
     * Properties of entity Spot.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ParentID = new Property(1, Long.class, "parentID", false, "PARENT_ID");
        public final static Property LastPosition = new Property(2, String.class, "lastPosition", false, "LAST_POSITION");
        public final static Property Number = new Property(3, int.class, "number", false, "NUMBER");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property IsChecked = new Property(6, boolean.class, "isChecked", false, "IS_CHECKED");
        public final static Property Longitude = new Property(7, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(8, Double.class, "latitude", false, "LATITUDE");
        public final static Property Location = new Property(9, String.class, "location", false, "LOCATION");
        public final static Property Distance = new Property(10, float.class, "distance", false, "DISTANCE");
        public final static Property Remark = new Property(11, String.class, "remark", false, "REMARK");
        public final static Property Date = new Property(12, String.class, "date", false, "DATE");
    }

    private Query<Spot> fileContent_SpotListQuery;

    public SpotDao(DaoConfig config) {
        super(config);
    }
    
    public SpotDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPOT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PARENT_ID\" INTEGER NOT NULL ," + // 1: parentID
                "\"LAST_POSITION\" TEXT," + // 2: lastPosition
                "\"NUMBER\" INTEGER NOT NULL ," + // 3: number
                "\"NAME\" TEXT NOT NULL ," + // 4: name
                "\"TYPE\" TEXT NOT NULL ," + // 5: type
                "\"IS_CHECKED\" INTEGER NOT NULL ," + // 6: isChecked
                "\"LONGITUDE\" REAL," + // 7: longitude
                "\"LATITUDE\" REAL," + // 8: latitude
                "\"LOCATION\" TEXT," + // 9: location
                "\"DISTANCE\" REAL NOT NULL ," + // 10: distance
                "\"REMARK\" TEXT," + // 11: remark
                "\"DATE\" TEXT NOT NULL );"); // 12: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPOT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Spot entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getParentID());
 
        String lastPosition = entity.getLastPosition();
        if (lastPosition != null) {
            stmt.bindString(3, lastPosition);
        }
        stmt.bindLong(4, entity.getNumber());
        stmt.bindString(5, entity.getName());
        stmt.bindString(6, entity.getType());
        stmt.bindLong(7, entity.getIsChecked() ? 1L: 0L);
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(8, longitude);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(9, latitude);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(10, location);
        }
        stmt.bindDouble(11, entity.getDistance());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(12, remark);
        }
        stmt.bindString(13, entity.getDate());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Spot entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getParentID());
 
        String lastPosition = entity.getLastPosition();
        if (lastPosition != null) {
            stmt.bindString(3, lastPosition);
        }
        stmt.bindLong(4, entity.getNumber());
        stmt.bindString(5, entity.getName());
        stmt.bindString(6, entity.getType());
        stmt.bindLong(7, entity.getIsChecked() ? 1L: 0L);
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(8, longitude);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(9, latitude);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(10, location);
        }
        stmt.bindDouble(11, entity.getDistance());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(12, remark);
        }
        stmt.bindString(13, entity.getDate());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Spot readEntity(Cursor cursor, int offset) {
        Spot entity = new Spot( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // parentID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastPosition
            cursor.getInt(offset + 3), // number
            cursor.getString(offset + 4), // name
            cursor.getString(offset + 5), // type
            cursor.getShort(offset + 6) != 0, // isChecked
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // longitude
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // latitude
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // location
            cursor.getFloat(offset + 10), // distance
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // remark
            cursor.getString(offset + 12) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Spot entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setParentID(cursor.getLong(offset + 1));
        entity.setLastPosition(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNumber(cursor.getInt(offset + 3));
        entity.setName(cursor.getString(offset + 4));
        entity.setType(cursor.getString(offset + 5));
        entity.setIsChecked(cursor.getShort(offset + 6) != 0);
        entity.setLongitude(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setLatitude(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setLocation(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDistance(cursor.getFloat(offset + 10));
        entity.setRemark(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDate(cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Spot entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Spot entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Spot entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "spotList" to-many relationship of FileContent. */
    public List<Spot> _queryFileContent_SpotList(Long parentID) {
        synchronized (this) {
            if (fileContent_SpotListQuery == null) {
                QueryBuilder<Spot> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentID.eq(null));
                queryBuilder.orderRaw("T.'DATE' ASC");
                fileContent_SpotListQuery = queryBuilder.build();
            }
        }
        Query<Spot> query = fileContent_SpotListQuery.forCurrentThread();
        query.setParameter(0, parentID);
        return query.list();
    }

}
