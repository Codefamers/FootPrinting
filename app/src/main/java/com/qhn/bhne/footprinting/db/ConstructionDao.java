package com.qhn.bhne.footprinting.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.qhn.bhne.footprinting.mvp.entries.Construction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONSTRUCTION".
*/
public class ConstructionDao extends AbstractDao<Construction, Long> {

    public static final String TABLENAME = "CONSTRUCTION";

    /**
     * Properties of entity Construction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProjectId = new Property(1, Long.class, "projectId", false, "PROJECT_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Category = new Property(3, String.class, "category", false, "CATEGORY");
        public final static Property UserName = new Property(4, String.class, "userName", false, "USER_NAME");
        public final static Property Profession = new Property(5, String.class, "profession", false, "PROFESSION");
        public final static Property VoltageClass = new Property(6, String.class, "voltageClass", false, "VOLTAGE_CLASS");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
        public final static Property Date = new Property(8, String.class, "date", false, "DATE");
    }

    private DaoSession daoSession;

    private Query<Construction> project_ConstructionListQuery;

    public ConstructionDao(DaoConfig config) {
        super(config);
    }
    
    public ConstructionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONSTRUCTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROJECT_ID\" INTEGER NOT NULL ," + // 1: projectId
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"CATEGORY\" TEXT NOT NULL ," + // 3: category
                "\"USER_NAME\" TEXT NOT NULL ," + // 4: userName
                "\"PROFESSION\" TEXT NOT NULL ," + // 5: profession
                "\"VOLTAGE_CLASS\" TEXT NOT NULL ," + // 6: voltageClass
                "\"REMARK\" TEXT," + // 7: remark
                "\"DATE\" TEXT);"); // 8: date
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CONSTRUCTION_NAME ON CONSTRUCTION" +
                " (\"NAME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONSTRUCTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Construction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProjectId());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getCategory());
        stmt.bindString(5, entity.getUserName());
        stmt.bindString(6, entity.getProfession());
        stmt.bindString(7, entity.getVoltageClass());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Construction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProjectId());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getCategory());
        stmt.bindString(5, entity.getUserName());
        stmt.bindString(6, entity.getProfession());
        stmt.bindString(7, entity.getVoltageClass());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
    }

    @Override
    protected final void attachEntity(Construction entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Construction readEntity(Cursor cursor, int offset) {
        Construction entity = new Construction( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // projectId
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // category
            cursor.getString(offset + 4), // userName
            cursor.getString(offset + 5), // profession
            cursor.getString(offset + 6), // voltageClass
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remark
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Construction entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProjectId(cursor.getLong(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setCategory(cursor.getString(offset + 3));
        entity.setUserName(cursor.getString(offset + 4));
        entity.setProfession(cursor.getString(offset + 5));
        entity.setVoltageClass(cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Construction entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Construction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Construction entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "constructionList" to-many relationship of Project. */
    public List<Construction> _queryProject_ConstructionList(Long projectId) {
        synchronized (this) {
            if (project_ConstructionListQuery == null) {
                QueryBuilder<Construction> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProjectId.eq(null));
                queryBuilder.orderRaw("T.'DATE' ASC");
                project_ConstructionListQuery = queryBuilder.build();
            }
        }
        Query<Construction> query = project_ConstructionListQuery.forCurrentThread();
        query.setParameter(0, projectId);
        return query.list();
    }

}
